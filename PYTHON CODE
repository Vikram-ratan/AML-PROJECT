{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5c666c6c",
   "metadata": {},
   "source": [
    "# 1  Data Preparation ï¼ˆCopy from Natasha)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "1e81529a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline \n",
    "\n",
    "pd.set_option('display.max_columns',None)\n",
    "pd.set_option('display.max_rows',None)\n",
    "pd.set_option('display.width',None)\n",
    "#pd.set_option('display.max_colwidth',-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "da0fb783",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-108-a8d874e91391>:1: DtypeWarning: Columns (35) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  openpl = pd.read_csv('/Users/zhaoxuanjin/Desktop/ML/Project/openpowerlifting.csv')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Event</th>\n",
       "      <th>Equipment</th>\n",
       "      <th>Age</th>\n",
       "      <th>AgeClass</th>\n",
       "      <th>Division</th>\n",
       "      <th>BodyweightKg</th>\n",
       "      <th>WeightClassKg</th>\n",
       "      <th>Squat1Kg</th>\n",
       "      <th>Squat2Kg</th>\n",
       "      <th>Squat3Kg</th>\n",
       "      <th>Squat4Kg</th>\n",
       "      <th>Best3SquatKg</th>\n",
       "      <th>Bench1Kg</th>\n",
       "      <th>Bench2Kg</th>\n",
       "      <th>Bench3Kg</th>\n",
       "      <th>Bench4Kg</th>\n",
       "      <th>Best3BenchKg</th>\n",
       "      <th>Deadlift1Kg</th>\n",
       "      <th>Deadlift2Kg</th>\n",
       "      <th>Deadlift3Kg</th>\n",
       "      <th>Deadlift4Kg</th>\n",
       "      <th>Best3DeadliftKg</th>\n",
       "      <th>TotalKg</th>\n",
       "      <th>Place</th>\n",
       "      <th>Wilks</th>\n",
       "      <th>McCulloch</th>\n",
       "      <th>Glossbrenner</th>\n",
       "      <th>IPFPoints</th>\n",
       "      <th>Tested</th>\n",
       "      <th>Country</th>\n",
       "      <th>Federation</th>\n",
       "      <th>Date</th>\n",
       "      <th>MeetCountry</th>\n",
       "      <th>MeetState</th>\n",
       "      <th>MeetName</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbie Murphy</td>\n",
       "      <td>F</td>\n",
       "      <td>SBD</td>\n",
       "      <td>Wraps</td>\n",
       "      <td>29.0</td>\n",
       "      <td>24-34</td>\n",
       "      <td>F-OR</td>\n",
       "      <td>59.8</td>\n",
       "      <td>60</td>\n",
       "      <td>80.0</td>\n",
       "      <td>92.5</td>\n",
       "      <td>105.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130.0</td>\n",
       "      <td>290.0</td>\n",
       "      <td>4</td>\n",
       "      <td>324.16</td>\n",
       "      <td>324.16</td>\n",
       "      <td>286.42</td>\n",
       "      <td>511.15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GPC-AUS</td>\n",
       "      <td>2018-10-27</td>\n",
       "      <td>Australia</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Melbourne Cup</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbie Tuong</td>\n",
       "      <td>F</td>\n",
       "      <td>SBD</td>\n",
       "      <td>Wraps</td>\n",
       "      <td>29.0</td>\n",
       "      <td>24-34</td>\n",
       "      <td>F-OR</td>\n",
       "      <td>58.5</td>\n",
       "      <td>60</td>\n",
       "      <td>100.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>62.5</td>\n",
       "      <td>67.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67.5</td>\n",
       "      <td>130.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>145.0</td>\n",
       "      <td>332.5</td>\n",
       "      <td>2</td>\n",
       "      <td>378.07</td>\n",
       "      <td>378.07</td>\n",
       "      <td>334.16</td>\n",
       "      <td>595.65</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GPC-AUS</td>\n",
       "      <td>2018-10-27</td>\n",
       "      <td>Australia</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Melbourne Cup</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ainslee Hooper</td>\n",
       "      <td>F</td>\n",
       "      <td>B</td>\n",
       "      <td>Raw</td>\n",
       "      <td>40.0</td>\n",
       "      <td>40-44</td>\n",
       "      <td>F-OR</td>\n",
       "      <td>55.4</td>\n",
       "      <td>56</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>27.5</td>\n",
       "      <td>32.5</td>\n",
       "      <td>-35.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.5</td>\n",
       "      <td>1</td>\n",
       "      <td>38.56</td>\n",
       "      <td>38.56</td>\n",
       "      <td>34.12</td>\n",
       "      <td>313.97</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GPC-AUS</td>\n",
       "      <td>2018-10-27</td>\n",
       "      <td>Australia</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Melbourne Cup</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Amy Moldenhauer</td>\n",
       "      <td>F</td>\n",
       "      <td>SBD</td>\n",
       "      <td>Wraps</td>\n",
       "      <td>23.0</td>\n",
       "      <td>20-23</td>\n",
       "      <td>F-OR</td>\n",
       "      <td>60.0</td>\n",
       "      <td>60</td>\n",
       "      <td>-105.0</td>\n",
       "      <td>-105.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>105.0</td>\n",
       "      <td>67.5</td>\n",
       "      <td>72.5</td>\n",
       "      <td>-75.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>72.5</td>\n",
       "      <td>132.5</td>\n",
       "      <td>-140.0</td>\n",
       "      <td>-140.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>132.5</td>\n",
       "      <td>310.0</td>\n",
       "      <td>3</td>\n",
       "      <td>345.61</td>\n",
       "      <td>345.61</td>\n",
       "      <td>305.37</td>\n",
       "      <td>547.04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GPC-AUS</td>\n",
       "      <td>2018-10-27</td>\n",
       "      <td>Australia</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Melbourne Cup</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Andrea Rowan</td>\n",
       "      <td>F</td>\n",
       "      <td>SBD</td>\n",
       "      <td>Wraps</td>\n",
       "      <td>45.0</td>\n",
       "      <td>45-49</td>\n",
       "      <td>F-OR</td>\n",
       "      <td>104.0</td>\n",
       "      <td>110</td>\n",
       "      <td>120.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>140.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>170.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>170.0</td>\n",
       "      <td>390.0</td>\n",
       "      <td>3</td>\n",
       "      <td>321.25</td>\n",
       "      <td>338.91</td>\n",
       "      <td>274.56</td>\n",
       "      <td>550.08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GPC-AUS</td>\n",
       "      <td>2018-10-27</td>\n",
       "      <td>Australia</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Melbourne Cup</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Name Sex Event Equipment   Age AgeClass Division  BodyweightKg  \\\n",
       "0     Abbie Murphy   F   SBD     Wraps  29.0    24-34     F-OR          59.8   \n",
       "1      Abbie Tuong   F   SBD     Wraps  29.0    24-34     F-OR          58.5   \n",
       "2   Ainslee Hooper   F     B       Raw  40.0    40-44     F-OR          55.4   \n",
       "3  Amy Moldenhauer   F   SBD     Wraps  23.0    20-23     F-OR          60.0   \n",
       "4     Andrea Rowan   F   SBD     Wraps  45.0    45-49     F-OR         104.0   \n",
       "\n",
       "  WeightClassKg  Squat1Kg  Squat2Kg  Squat3Kg  Squat4Kg  Best3SquatKg  \\\n",
       "0            60      80.0      92.5     105.0       NaN         105.0   \n",
       "1            60     100.0     110.0     120.0       NaN         120.0   \n",
       "2            56       NaN       NaN       NaN       NaN           NaN   \n",
       "3            60    -105.0    -105.0     105.0       NaN         105.0   \n",
       "4           110     120.0     130.0     140.0       NaN         140.0   \n",
       "\n",
       "   Bench1Kg  Bench2Kg  Bench3Kg  Bench4Kg  Best3BenchKg  Deadlift1Kg  \\\n",
       "0      45.0      50.0      55.0       NaN          55.0        110.0   \n",
       "1      55.0      62.5      67.5       NaN          67.5        130.0   \n",
       "2      27.5      32.5     -35.0       NaN          32.5          NaN   \n",
       "3      67.5      72.5     -75.0       NaN          72.5        132.5   \n",
       "4      70.0      75.0      80.0       NaN          80.0        150.0   \n",
       "\n",
       "   Deadlift2Kg  Deadlift3Kg  Deadlift4Kg  Best3DeadliftKg  TotalKg Place  \\\n",
       "0        120.0        130.0          NaN            130.0    290.0     4   \n",
       "1        140.0        145.0          NaN            145.0    332.5     2   \n",
       "2          NaN          NaN          NaN              NaN     32.5     1   \n",
       "3       -140.0       -140.0          NaN            132.5    310.0     3   \n",
       "4        160.0        170.0          NaN            170.0    390.0     3   \n",
       "\n",
       "    Wilks  McCulloch  Glossbrenner  IPFPoints Tested Country Federation  \\\n",
       "0  324.16     324.16        286.42     511.15    NaN     NaN    GPC-AUS   \n",
       "1  378.07     378.07        334.16     595.65    NaN     NaN    GPC-AUS   \n",
       "2   38.56      38.56         34.12     313.97    NaN     NaN    GPC-AUS   \n",
       "3  345.61     345.61        305.37     547.04    NaN     NaN    GPC-AUS   \n",
       "4  321.25     338.91        274.56     550.08    NaN     NaN    GPC-AUS   \n",
       "\n",
       "         Date MeetCountry MeetState       MeetName  \n",
       "0  2018-10-27   Australia       VIC  Melbourne Cup  \n",
       "1  2018-10-27   Australia       VIC  Melbourne Cup  \n",
       "2  2018-10-27   Australia       VIC  Melbourne Cup  \n",
       "3  2018-10-27   Australia       VIC  Melbourne Cup  \n",
       "4  2018-10-27   Australia       VIC  Melbourne Cup  "
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "openpl = pd.read_csv('/Users/zhaoxuanjin/Desktop/ML/Project/openpowerlifting.csv')\n",
    "openpl.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "6693c3ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "openpl.drop(['Squat4Kg','Bench4Kg','Deadlift4Kg'],axis=1,inplace=True)\n",
    "openpl.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "f33ccd9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1420270, 34)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#The shape of the dataset\n",
    "openpl.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "b8efd058",
   "metadata": {},
   "outputs": [],
   "source": [
    "def strapswraps(x):\n",
    "    if x == 'Straps':\n",
    "        return 'Wraps'\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "a237b42f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Equipment\n",
      "Single-ply    785638\n",
      "Raw           466212\n",
      "Wraps         103567\n",
      "Multi-ply      64853\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "openpl['Equipment'] = openpl['Equipment'].apply(strapswraps)\n",
    "print(openpl['Equipment'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3645ee01",
   "metadata": {},
   "source": [
    "# 2. K-Nearest Neighbor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bee4c7d",
   "metadata": {},
   "source": [
    "                                                                                       \n",
    "# Predict: Sex, Age, BodyweightKg, Equipment, Best3SquatKg -> TotalKg \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "5d4a30f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(469960, 34)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Drop Null of 5 columns\n",
    "\n",
    "openpl.dropna(subset=['Sex','Age','BodyweightKg', 'Equipment','TotalKg','Best3SquatKg'], inplace=True)\n",
    "openpl.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "2bacdd28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert TotalKg \n",
    "# ( F ) TotalKg > ( F ) avg(TotalKg) -> 1 else 0  \n",
    "# ( M ) TotalKg > ( M ) avg(TotalKg) -> 1 else 0\n",
    "\n",
    "# 1 means 'Elite lifter'   0 means 'Professional lifter'\n",
    "\n",
    "mean_valueF = openpl[openpl['Sex'] == 'F']['TotalKg'].mean() #266.87 -- F\n",
    "mean_valueM = openpl[openpl['Sex'] == 'M']['TotalKg'].mean() #440.95 -- M\n",
    "\n",
    "def tot_label(sex,score):\n",
    "    if sex == 'F':\n",
    "        if score <= mean_valueF:\n",
    "            return 0\n",
    "        else:\n",
    "            return 1\n",
    "    elif sex == 'M':\n",
    "        if score <= mean_valueM:\n",
    "            return 0\n",
    "        else:\n",
    "            return 1\n",
    "        \n",
    "openpl['Tot_label'] = openpl.apply(lambda row: tot_label(row['Sex'], row['TotalKg']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "52603f61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert Sex to 0(F) or 1(M)\n",
    "def sex_label(x):\n",
    "    if(x == \"F\"):\n",
    "        return 0\n",
    "    else:\n",
    "        return 1\n",
    "    \n",
    "openpl['Sex_label'] = pd.DataFrame(openpl.Sex.apply(lambda x : sex_label(x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "7582004a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert Equipment to 0 or 1\n",
    "equip_list = ['Single-ply','Raw','Wraps','Multi-ply']\n",
    "\n",
    "def eq_s(x):\n",
    "    if(x == 'Single-ply'):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "def eq_r(x):\n",
    "    if(x == 'Raw'):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "def eq_w(x):\n",
    "    if(x == 'Wraps'):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "def eq_m(x):\n",
    "    if(x == 'Multi-ply'):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "    \n",
    "openpl['Eq_s'] = pd.DataFrame(openpl.Equipment.apply(lambda x : eq_s(x)))\n",
    "openpl['Eq_r'] = pd.DataFrame(openpl.Equipment.apply(lambda x : eq_r(x)))\n",
    "openpl['Eq_w'] = pd.DataFrame(openpl.Equipment.apply(lambda x : eq_w(x)))\n",
    "openpl['Eq_m'] = pd.DataFrame(openpl.Equipment.apply(lambda x : eq_m(x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "fd0583da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scale Age\n",
    "max_age = openpl['Age'].max() \n",
    "min_age = openpl['Age'].min()\n",
    "\n",
    "openpl['Age_scaled'] = (openpl['Age'] - min_age) / (max_age - min_age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "d186a954",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scale BodyweightKg\n",
    "max_body = openpl['BodyweightKg'].max() \n",
    "min_body = openpl['BodyweightKg'].min() \n",
    "openpl['Bodyweight_scaled'] = (openpl['BodyweightKg']-min_body)/(max_body-min_body)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "70a18aa1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex_label</th>\n",
       "      <th>Age_scaled</th>\n",
       "      <th>Bodyweight_scaled</th>\n",
       "      <th>Eq_s</th>\n",
       "      <th>Eq_r</th>\n",
       "      <th>Eq_w</th>\n",
       "      <th>Eq_m</th>\n",
       "      <th>Tot_label</th>\n",
       "      <th>Best3SquatKg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.303665</td>\n",
       "      <td>0.187397</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>105.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.303665</td>\n",
       "      <td>0.181612</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.240838</td>\n",
       "      <td>0.188287</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>105.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.471204</td>\n",
       "      <td>0.384095</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>140.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0.387435</td>\n",
       "      <td>0.250590</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>142.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sex_label  Age_scaled  Bodyweight_scaled  Eq_s  Eq_r  Eq_w  Eq_m  \\\n",
       "0          0    0.303665           0.187397     0     0     1     0   \n",
       "1          0    0.303665           0.181612     0     0     1     0   \n",
       "3          0    0.240838           0.188287     0     0     1     0   \n",
       "4          0    0.471204           0.384095     0     0     1     0   \n",
       "5          0    0.387435           0.250590     0     0     1     0   \n",
       "\n",
       "   Tot_label  Best3SquatKg  \n",
       "0          0         105.0  \n",
       "1          1         120.0  \n",
       "3          0         105.0  \n",
       "4          1         140.0  \n",
       "5          1         142.5  "
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# New dataframe\n",
    "openpl[['Sex_label','Age_scaled','Bodyweight_scaled','Eq_s','Eq_r','Eq_w','Eq_m','Tot_label','Best3SquatKg']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "35919fa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = openpl[['Sex_label','Age_scaled','Bodyweight_scaled','Eq_s','Eq_r','Eq_w','Eq_m','Best3SquatKg']]\n",
    "Y = openpl['Tot_label']\n",
    "\n",
    "# Data Splitting\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "78a1d27f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-21 {color: black;}#sk-container-id-21 pre{padding: 0;}#sk-container-id-21 div.sk-toggleable {background-color: white;}#sk-container-id-21 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-21 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-21 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-21 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-21 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-21 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-21 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-21 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-21 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-21 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-21 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-21 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-21 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-21 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-21 div.sk-item {position: relative;z-index: 1;}#sk-container-id-21 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-21 div.sk-item::before, #sk-container-id-21 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-21 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-21 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-21 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-21 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-21 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-21 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-21 div.sk-label-container {text-align: center;}#sk-container-id-21 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-21 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-21\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=30)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" checked><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=30)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=30)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train a k-NN model \n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn = KNeighborsClassifier(n_neighbors = 30)\n",
    "\n",
    "knn.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "e3195859",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train score: 0.9315175759639118\n",
      "Test score: 0.9259851902289556\n"
     ]
    }
   ],
   "source": [
    "knn.predict(X_test)\n",
    "print('Train score:',knn.score(X_train, y_train))\n",
    "print('Test score:',knn.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9092f32",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e898e6b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "783e4c47",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8befd222",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
